// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MultiCustomerBank {
    struct Customer {
        uint256 balance;
    }

    mapping(address => Customer) public customers;
    address public owner;

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this operation");
        _;
    }

    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than 0");
        customers[msg.sender].balance += msg.value;
    }

    function withdraw(uint256 amount) public {
        require(amount > 0, "Withdrawal amount must be greater than 0");
        require(customers[msg.sender].balance >= amount, "Insufficient balance");
        customers[msg.sender].balance -= amount;
        payable(msg.sender).transfer(amount);
    }

    function showBalance() public view returns (uint256) {
        return customers[msg.sender].balance;
    }

    function addCustomer(address customerAddress) public onlyOwner {
        require(customers[customerAddress].balance == 0, "Customer already exists");
        customers[customerAddress] = Customer(0);
    }

    function removeCustomer(address customerAddress) public onlyOwner {
        delete customers[customerAddress];
    }
}
